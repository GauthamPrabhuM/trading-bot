{"version":3,"sources":["index.js"],"names":["Chart","require","unix","Header","React","Component","StockView","state","realTimeData","startDate","Date","parse","endDate","now","fetch","response","json","console","log","this","setState","update","ctx","document","getElementById","getContext","chart","type","data","labels","t","datasets","label","backgroundColor","borderColor","borderWidth","c","fill","options","C","Page","className","ReactDOM","render"],"mappings":"sNAGMA,G,MAAQC,EAAQ,KAChBC,EAAOD,EAAQ,IAEbE,E,uKAEF,OACE,gCACE,6CACA,8B,GALaC,IAAMC,WAWrBC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,aAAc,CAAC,EAAI,OAAO,EAAI,OAAO,EAAI,OAAO,EAAI,OAAO,GAAK,OAAO,EAAI,aAF9E,E,gMAMG,uBACA,OACTC,EAAYC,KAAKC,MAAM,4BACvBC,EAAUV,EAAKQ,KAAKG,O,SACHC,MAAM,yEAAqFL,EAArF,OAAyGG,EAAzG,+B,cAAvBG,E,gBACaA,EAASC,O,OAAtBA,E,OACNC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEZ,aAAcQ,IAC9BG,KAAKE,SAGDC,EAAMC,SAASC,eAAe,WAAWC,WAAW,MACpDC,EAAQ,IAAI1B,EAAMsB,EAAK,CAEvBK,KAAM,OAGNC,KAAM,CACFC,OAAQV,KAAKZ,MAAMC,aAAasB,EAChCC,SAAU,CAAC,CACPC,MAAO,OACPC,gBAAiB,oBACjBC,YAAa,oBACbC,YAAa,EACbP,KAAMT,KAAKZ,MAAMC,aAAa4B,EAC9BC,MAAM,KAKdC,QAAS,KAEbrB,QAAQC,IAAKQ,G,sIAIb,OAAOP,KAAKZ,MAAMC,aAAa4B,I,+BAI/B,OACE,gDACgBjB,KAAKE,gB,GAjDHjB,IAAMC,WAuDxBkC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKhC,MAAQ,GAFD,E,kLAMRe,EAAMC,SAASC,eAAe,WAAWC,WAAW,MACpDC,EAAQ,IAAI1B,EAAMsB,EAAK,CAEvBK,KAAM,OAGNC,KAAM,CACFC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEE,SAAU,CAAC,CACPC,MAAO,mBACPC,gBAAiB,oBACjBC,YAAa,oBACbN,KAAM,CAAC,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,OAKpCU,QAAS,KAEbrB,QAAQC,IAAKQ,G,gIAIb,OACE,yD,GA/BUtB,IAAMC,WAsChBmC,E,uKAEF,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,cAACtC,EAAD,IACA,cAACG,EAAD,IACA,cAACiC,EAAD,a,GAPSnC,IAAMC,WAiBzBqC,IAASC,OACP,cAACH,EAAD,IACAjB,SAASC,eAAe,U","file":"static/js/main.fe3070e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nconst Chart = require('chart.js');\r\nconst unix = require('to-unix-timestamp');\r\n\r\n  class Header extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Trading Bot</h1>\r\n          <br></br>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  class StockView extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = { realTimeData: {\"c\":116.59,\"h\":117.49,\"l\":116.22,\"o\":116.57,\"pc\":116.03,\"t\":1606582932} };\r\n    }\r\n  \r\n    async componentDidMount() {\r\n      const apiKey = 'bv184tv48v6p0f6idl20';\r\n      const symbol = 'AAPL';\r\n      const startDate = Date.parse('01 Jan 1970 00:00:00 GMT');\r\n      const endDate = unix(Date.now());\r\n      const response = await fetch(`https://finnhub.io/api/v1/stock/candle?symbol=` + symbol + `&resolution=60&from=` + startDate + `&to=`+ endDate +`&token=` + apiKey);\r\n      const json = await response.json();\r\n      console.log(json);\r\n      this.setState({ realTimeData: json });\r\n      this.update();\r\n\r\n      // chart\r\n      var ctx = document.getElementById('myChart').getContext('2d');\r\n      var chart = new Chart(ctx, {\r\n          // The type of chart we want to create\r\n          type: 'line',\r\n\r\n          // The data for our dataset\r\n          data: {\r\n              labels: this.state.realTimeData.t,\r\n              datasets: [{\r\n                  label: 'AAPL',\r\n                  backgroundColor: 'rgb(255, 99, 132)',\r\n                  borderColor: 'rgb(255, 99, 132)',\r\n                  borderWidth: 1,\r\n                  data: this.state.realTimeData.c,\r\n                  fill: false\r\n              }]\r\n          },\r\n\r\n          // Configuration options go here\r\n          options: {}\r\n      });\r\n      console.log( chart);\r\n    }\r\n\r\n    update() {\r\n      return this.state.realTimeData.c;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          APPL  Price: {this.update()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class C extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {};\r\n    }\r\n\r\n    async componentDidMount() {\r\n      var ctx = document.getElementById('myChart').getContext('2d');\r\n      var chart = new Chart(ctx, {\r\n          // The type of chart we want to create\r\n          type: 'line',\r\n\r\n          // The data for our dataset\r\n          data: {\r\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n              datasets: [{\r\n                  label: 'My First dataset',\r\n                  backgroundColor: 'rgb(255, 99, 132)',\r\n                  borderColor: 'rgb(255, 99, 132)',\r\n                  data: [0, 10, 5, 2, 20, 30, 45]\r\n              }]\r\n          },\r\n\r\n          // Configuration options go here\r\n          options: {}\r\n      });\r\n      console.log( chart);\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <h2>Graph From chart.js</h2>\r\n        \r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n  class Page extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"page\">\r\n          <div className=\"header\">\r\n            <Header />\r\n            <StockView />\r\n            <C />\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Page />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  "],"sourceRoot":""}